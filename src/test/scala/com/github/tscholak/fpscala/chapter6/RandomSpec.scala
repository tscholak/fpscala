package com.github.tscholak.fpscala.chapter6

import org.scalatest.{Matchers, FlatSpec}
import Random._

class RandomSpec extends FlatSpec with Matchers {

  "The next pseudo-random integer following a seed of 42" should "be 16159453" in {
    SimpleRNG(42).nextInt._1 should be (16159453)
  }

  // exercise 6.1
  // can't be fully tested

  // exercise 6.2
  // can't be fully tested

  // exercise 6.3
  // can't be fully tested

  // exercise 6.4
  "A list of 2 pseudo-random integers following a seed of 42" should "be List(16159453, -1281479697) with new random seed 197491923327988" in {
    ints(2)(SimpleRNG(42)) should be ((List(16159453, -1281479697), SimpleRNG(197491923327988L)))
  }

  // exercise 6.5
  "A pseudo-random double generated by `double` and by `double2`" should "be the same" in {
    double(SimpleRNG(42))._1 should be (double2(SimpleRNG(42))._1)
  }

  // exercise 6.6
  // TODO: test map2

  // exercise 6.7
  "A list of two `nonNegativeEven` Rands when seeded with `SimpleRNG(42)`" should "produce a List(1281479696, 16159452) and SimpleRNG(197491923327988)" in {
    sequence(List.fill(2)(nonNegativeEven))(SimpleRNG(42)) should be ((List(1281479696, 16159452), SimpleRNG(197491923327988L)))
  }

  // note that the order is reversed compared to the original `ints`
  "A list of 2 pseudo-random integers following a seed of 42" should "be List(-1281479697, 16159453) with new random seed 197491923327988" in {
    ints2(2)(SimpleRNG(42)) should be((List(-1281479697, 16159453), SimpleRNG(197491923327988L)))
  }

  // exercise 6.8
  // TODO: test flatMap

  // exercise 6.9
  // TODO: test mapViaFlatMap and map2ViaFlatMap


}